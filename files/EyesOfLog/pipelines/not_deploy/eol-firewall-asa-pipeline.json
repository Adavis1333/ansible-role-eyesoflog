{
  "description" : "EoL Axians - Pipeline for ASA firewall log",
  "version" : 2021030201,
  "processors": [
    {
      "set" : {
        "field" : "event.ingested",
        "value" : "{{_ingest.timestamp}}"
      }
    },
    {
      "grok" : {
        "field" : "message",
        "patterns" : [
          """(?:%{SYSLOG_HEADER})?\s*%{GREEDYDATA:log.original}"""
        ],
        "pattern_definitions" : {
          "SYSLOG_END" : """(?:(:|\s)\s+)""",
          "PROCESS_HOST" : """(?:%{PROCESS:process.name}:\s%{SYSLOGHOST:host.name})""",
          "HOST_PROCESS" : """(?:%{SYSLOGHOST:host.hostname}:?\s+)?(?:%{PROCESS:process.name}?(?:\[%{POSINT:process.pid:long}\])?)?""",
          "SYSLOG_HEADER" : """(?:%{SYSLOGFACILITY}\s*)?(?:%{FTD_DATE:_temp_.raw_date}:?\s+)?(?:%{PROCESS_HOST}|%{HOST_PROCESS})(?:{DATA})?%{SYSLOG_END}?""",
          "SYSLOGFACILITY" : "<%{NONNEGINT:syslog.facility:int}(?:.%{NONNEGINT:syslog.priority:int})?>",
          "FTD_DATE" : "(?:%{TIMESTAMP_ISO8601}|%{ASA_DATE})",
          "ASA_DATE" : "(?:%{DAY} )?%{MONTH}  *%{MONTHDAY}(?: %{YEAR})? %{TIME}(?: %{TZ})?",
          "PROCESS" : """(?:[^%\s:\[]+)"""
        }
      }
    },
    {
      "grok" : {
        "field" : "log.original",
        "patterns" : [
          """%{FTD_PREFIX}-(?:%{FTD_SUFFIX:_temp_.cisco.suffix}-)?%{NONNEGINT:event.severity:int}-%{POSINT:_temp_.cisco.message_id}?:?\s*%{GREEDYDATA:message}""",
          "%{GREEDYDATA:message}"
        ],
        "pattern_definitions" : {
          "FTD_SUFFIX" : "[^0-9-]+",
          "FTD_PREFIX" : "%{DATA}%(?:[A-Z]+)"
        }
      }
    },
    {
      "set" : {
        "value" : "",
        "if" : "ctx?._temp_?.cisco?.message_id == null",
        "field" : "_temp_.cisco.message_id"
      }
    },
    {
      "set" : {
        "if" : "ctx?.event?.severity == null",
        "field" : "event.severity",
        "value" : 7
      }
    },
    {
      "drop" : {
        "if" : "ctx.event.severity > 7"
      }
    },
    {
      "set" : {
        "field" : "log.level",
        "if" : "ctx.event.severity == 0",
        "value" : "unknown"
      }
    },
    {
      "set" : {
        "value" : "alert",
        "field" : "log.level",
        "if" : "ctx.event.severity == 1"
      }
    },
    {
      "set" : {
        "field" : "log.level",
        "if" : "ctx.event.severity == 2",
        "value" : "critical"
      }
    },
    {
      "set" : {
        "field" : "log.level",
        "if" : "ctx.event.severity == 3",
        "value" : "error"
      }
    },
    {
      "set" : {
        "if" : "ctx.event.severity == 4",
        "value" : "warning",
        "field" : "log.level"
      }
    },
    {
      "set" : {
        "if" : "ctx.event.severity == 5",
        "value" : "notification",
        "field" : "log.level"
      }
    },
    {
      "set" : {
        "value" : "informational",
        "field" : "log.level",
        "if" : "ctx.event.severity == 6"
      }
    },
    {
      "set" : {
        "field" : "log.level",
        "if" : "ctx.event.severity == 7",
        "value" : "debug"
      }
    },
    {
        "set" : {
          "field" : "event.action",
          "value" : "firewall-rule",
          "if" : "ctx._temp_.cisco.message_id != \"\""
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106001'",
          "field" : "message",
          "pattern" : "%{network.direction} %{network.transport} connection %{event.outcome} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} flags %{} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106002'",
          "field" : "message",
          "pattern" : "%{network.transport} Connection %{event.outcome} by %{network.direction} list %{_temp_.cisco.list_id} src %{source.address} dest %{destination.address}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106006'",
          "field" : "message",
          "pattern" : "%{event.outcome} %{network.direction} %{network.transport} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106007'",
          "field" : "message",
          "pattern" : "%{event.outcome} %{network.direction} %{network.transport} from %{source.address}/%{source.port} to %{destination.address}/%{destination.port} due to %{network.protocol} %{}"
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '106010'",
          "field" : "message",
          "patterns" : [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.direction} %{NOTSPACE:network.transport} src %{NOTSPACE:_temp_.cisco.source_interface}:%{NOTSPACE:source.address}/%{POSINT:source.port} (%{DATA})?dst %{NOTSPACE:_temp_.cisco.destination_interface}:%{NOTSPACE:destination.address}/%{POSINT:destination.port}(%{GREEDYDATA})?"
          ]
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106013'",
          "field" : "message",
          "pattern" : "Dropping echo request from %{source.address} to PAT address %{destination.address}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '106013'",
          "field" : "network.transport",
          "value" : "icmp"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '106013'",
          "field" : "network.direction",
          "value" : "inbound"
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '106014'",
          "field" : "message",
          "patterns" : [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.direction} %{NOTSPACE:network.transport} src %{NOTSPACE:_temp_.cisco.source_interface}:%{NOTSPACE:source.address} (%{DATA})?dst %{NOTSPACE:_temp_.cisco.destination_interface}:%{NOTSPACE:destination.address}(%{GREEDYDATA})?"
          ]
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '106015'",
          "field" : "message",
          "patterns" : [
            "%{NOTSPACE:event.outcome} %{NOTSPACE:network.transport} %{NOTSPACE} from %{IP:source.address}/%{POSINT:source.port} to %{IP:destination.address}/%{POSINT:destination.port} flags %{DATA} on interface %{NOTSPACE:_temp_.cisco.source_interface}"
          ]
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106016'",
          "field" : "message",
          "pattern" : "%{event.outcome} IP spoof from (%{source.address}) to %{destination.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106017'",
          "field" : "message",
          "pattern" : "%{event.outcome} IP due to Land Attack from %{source.address} to %{destination.address}"
        }
      },
      {
        "dissect" : {
          "pattern" : "%{network.transport} packet type %{_temp_.cisco.icmp_type} %{event.outcome} by %{network.direction} list %{_temp_.cisco.list_id} src %{source.address} dest %{destination.address}",
          "if" : "ctx._temp_.cisco.message_id == '106018'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "%{event.outcome} IP teardrop fragment (size = %{}, offset = %{}) from %{source.address} to %{destination.address}",
          "if" : "ctx._temp_.cisco.message_id == '106020'"
        }
      },
      {
        "dissect" : {
          "pattern" : "%{event.outcome} %{network.transport} reverse path check from %{source.address} to %{destination.address} on interface %{_temp_.cisco.source_interface}",
          "if" : "ctx._temp_.cisco.message_id == '106021'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106022'",
          "field" : "message",
          "pattern" : "%{event.outcome} %{network.transport} connection spoof from %{source.address} to %{destination.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '106023'",
          "field" : "message",
          "patterns" : [
            "^%{NOTSPACE:event.outcome} %{NOTSPACE:network.transport} src %{NOTSPACE:_temp_.cisco.source_interface}:%{IPORHOST:source.address}(/%{POSINT:source.port})?\\s*(%{GREEDYDATA:_temp_.cisco.source_username} )?dst %{NOTSPACE:_temp_.cisco.destination_interface}:%{IPORHOST:destination.address}(/%{POSINT:destination.port})?%{DATA}by access.group \"%{NOTSPACE:_temp_.cisco.list_id}\""
          ]
        }
      },
      {
        "dissect" : {
          "pattern" : "%{} %{event.outcome} src %{source.address} dst %{destination.address} by access-group \"%{_temp_.cisco.list_id}\"",
          "if" : "ctx._temp_.cisco.message_id == '106027'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106100'",
          "field" : "message",
          "pattern" : "access-list %{_temp_.cisco.list_id} %{event.outcome} %{network.transport} %{_temp_.cisco.source_interface}/%{source.address}(%{source.port})%{}-> %{_temp_.cisco.destination_interface}/%{destination.address}(%{destination.port})%{}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '106102' || ctx._temp_.cisco.message_id == '106103'",
          "field" : "message",
          "pattern" : "access-list %{_temp_.cisco.list_id} %{event.outcome} %{network.transport} for user %{user.name} %{_temp_.cisco.source_interface}/%{source.address}(%{source.port})%{}-> %{_temp_.cisco.destination_interface}/%{destination.address}(%{destination.port})%{}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '111004'",
          "field" : "message",
          "pattern" : "%{source.address} end configuration: %{_temp_.cisco.cli_outcome}"
        }
      },
      {
        "set" : {
          "field" : "event.outcome",
          "value" : "success",
          "if" : "ctx._temp_.cisco.message_id == '111004' && ctx?._temp_?.cisco?.cli_outcome == 'OK'"
        }
      },
      {
        "set" : {
          "field" : "event.outcome",
          "value" : "failure",
          "if" : "ctx._temp_.cisco.message_id == '111004' && ctx?._temp_?.cisco?.cli_outcome == 'FAILED'"
        }
      },
      {
        "remove" : {
          "ignore_missing" : true,
          "field" : "_temp_.cisco.cli_outcome"
        }
      },
      {
        "append" : {
          "field" : "event.type",
          "value" : "change",
          "if" : "ctx._temp_.cisco.message_id == '111004'"
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '111009'",
          "field" : "message",
          "patterns" : [
            "^%{NOTSPACE} '%{NOTSPACE:host.user.name}' executed %{NOTSPACE} %{GREEDYDATA:_temp_.cisco.command_line_arguments}"
          ]
        }
      },
      {
        "grok" : {
          "field" : "message",
          "patterns" : [
            "User '%{NOTSPACE:host.user.name}', running %{QUOTEDSTRING} from IP %{IP:source.address}, executed %{QUOTEDSTRING:_temp_.cisco.command_line_arguments}"
          ],
          "if" : "ctx._temp_.cisco.message_id == '111010'"
        }
      },
      {
        "dissect" : {
          "pattern" : "Group = %{}, Username = %{source.user.name}, IP = %{destination.address}, Session disconnected. Session Type: %{}, Duration: %{_temp_.duration_hms}, Bytes xmt: %{source.bytes}, Bytes rcv: %{destination.bytes}, Reason: %{message}",
          "if" : "ctx._temp_.cisco.message_id == '113019'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : """["302013", "302015"].contains(ctx._temp_.cisco.message_id)""",
          "field" : "message",
          "pattern" : "Built %{network.direction} %{network.transport} connection %{_temp_.cisco.connection_id} for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '303002'",
          "field" : "message",
          "pattern" : "%{network.protocol} connection from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}, user %{client.user.name} %{} file %{file.path}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '302012'",
          "field" : "message",
          "pattern" : "Teardown %{} %{network.transport} translation from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} duration %{_temp_.duration_hms}"
        }
      },
      {
        "grok" : {
          "patterns" : [
            "Built %{NOTSPACE:network.direction} %{NOTSPACE:network.protocol} connection for faddr %{IP:destination.address}/%{NUMBER} (%{DATA})?gaddr %{IP:_temp_.natsrcip}/%{NUMBER} laddr %{IP:source.address}/%{NUMBER}(%{GREEDYDATA})?"
          ],
          "if" : "ctx._temp_.cisco.message_id == '302020'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '302022'",
          "field" : "message",
          "pattern" : "Built %{} stub %{network.transport} connection for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}"
        }
      },
      {
        "grok" : {
          "if" : "ctx._temp_.cisco.message_id == '304001'",
          "field" : "message",
          "patterns" : [
            "%{IP:source.address} %{DATA} (%{NOTSPACE}@)?%{IP:destination.address}:%{GREEDYDATA:url.original}"
          ]
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '304001'",
          "field" : "event.outcome",
          "value" : "allow"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '304002'",
          "field" : "message",
          "pattern" : "Access %{event.outcome} URL %{url.original} SRC %{source.address} %{}EST %{destination.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '305011'",
          "field" : "message",
          "pattern" : "Built %{} %{network.transport} translation from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}"
        }
      },
      {
        "dissect" : {
          "pattern" : "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, code=%{_temp_.cisco.icmp_code} from %{source.address} on interface %{_temp_.cisco.source_interface}",
          "if" : "ctx._temp_.cisco.message_id == '313001'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '313004'",
          "field" : "message",
          "pattern" : "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, from%{}addr %{source.address} on interface %{_temp_.cisco.source_interface} to %{destination.address}: no matching session"
        }
      },
      {
        "dissect" : {
          "pattern" : "No matching connection for %{network.transport} error message: %{} on %{_temp_.cisco.source_interface} interface.%{}riginal IP payload: %{}",
          "if" : "ctx._temp_.cisco.message_id == '313005'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '313008'",
          "field" : "message",
          "pattern" : "%{event.outcome} %{network.transport} type=%{_temp_.cisco.icmp_type}, code=%{_temp_.cisco.icmp_code} from %{source.address} on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '313009'",
          "field" : "message",
          "pattern" : "%{event.outcome} invalid %{network.transport} code %{_temp_.cisco.icmp_code}, for %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '322001'",
          "field" : "message",
          "pattern" : "%{event.outcome} MAC address %{source.mac}, possible spoof attempt on interface %{_temp_.cisco.source_interface}"
        }
      },
      {
        "dissect" : {
          "pattern" : "Dynamic filter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338001'",
          "field" : "message"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338001'",
          "field" : "server.domain",
          "value" : "{{source.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338002'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338002'",
          "field" : "server.domain",
          "value" : "{{destination.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338003'"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338004'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338005'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338005'",
          "field" : "server.domain",
          "value" : "{{source.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338006'"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338006'",
          "field" : "server.domain",
          "value" : "{{destination.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338007'"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} black%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338008'"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}",
          "if" : "ctx._temp_.cisco.message_id == '338101'"
        }
      },
      {
        "set" : {
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338101'",
          "field" : "server.domain",
          "value" : "{{source.domain}}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338102'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}"
        }
      },
      {
        "set" : {
          "value" : "{{destination.domain}}",
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338102'",
          "field" : "server.domain"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{}",
          "if" : "ctx._temp_.cisco.message_id == '338103'"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338104'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} white%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{}"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338201'"
        }
      },
      {
        "set" : {
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338201'",
          "field" : "server.domain",
          "value" : "{{source.domain}}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338202'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338202'",
          "field" : "server.domain",
          "value" : "{{destination.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338203'",
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}source %{} resolved from %{_temp_.cisco.list_id} list: %{source.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338203'",
          "field" : "server.domain",
          "value" : "{{source.domain}}",
          "ignore_empty_value" : true
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Dynamic %{}ilter %{event.outcome} grey%{}d %{network.transport} traffic from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})%{}destination %{} resolved from %{_temp_.cisco.list_id} list: %{destination.domain}, threat-level: %{_temp_.cisco.threat_level}, category: %{_temp_.cisco.threat_category}",
          "if" : "ctx._temp_.cisco.message_id == '338204'"
        }
      },
      {
        "set" : {
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338204'",
          "field" : "server.domain",
          "value" : "{{destination.domain}}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '338301'",
          "field" : "message",
          "pattern" : "Intercepted DNS reply for domain %{source.domain} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}, matched %{_temp_.cisco.list_id}"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338301'",
          "field" : "client.address",
          "value" : "{{destination.address}}",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "value" : "{{destination.port}}",
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338301'",
          "field" : "client.port"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == '338301'",
          "field" : "server.address",
          "value" : "{{source.address}}",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "field" : "server.port",
          "value" : "{{source.port}}",
          "ignore_empty_value" : true,
          "if" : "ctx._temp_.cisco.message_id == '338301'"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "User priv level changed: Uname: %{host.user.name} From: %{_temp_.cisco.privilege.old} To: %{_temp_.cisco.privilege.new}",
          "if" : "ctx._temp_.cisco.message_id == '502103'"
        }
      },
      {
        "append" : {
          "if" : "ctx._temp_.cisco.message_id == '502103'",
          "field" : "event.type",
          "value" : [
            "group",
            "change"
          ]
        }
      },
      {
        "append" : {
          "if" : "ctx._temp_.cisco.message_id == '502103'",
          "field" : "event.category",
          "value" : "iam"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '507003'",
          "field" : "message",
          "pattern" : "%{network.transport} flow from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} terminated by inspection engine, reason - %{message}"
        }
      },
      {
        "dissect" : {
          "if" : """["605004", "605005"].contains(ctx._temp_.cisco.message_id)""",
          "field" : "message",
          "pattern" : "Login %{event.outcome} from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{network.protocol} for user \"%{source.user.name}\""
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '609001'",
          "field" : "message",
          "pattern" : "Built local-host %{_temp_.cisco.source_interface}:%{source.address}"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '609002'",
          "field" : "message",
          "pattern" : "Teardown local-host %{_temp_.cisco.source_interface}:%{source.address} duration %{_temp_.duration_hms}"
        }
      },
      {
        "dissect" : {
          "pattern" : "User authentication %{event.outcome}: IP address: %{source.address}, Uname: %{host.user.name}",
          "if" : """["611102", "611101"].contains(ctx._temp_.cisco.message_id)""",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "pattern" : "%{network.transport} access denied by ACL from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}",
          "if" : "ctx._temp_.cisco.message_id == '710003'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "pattern" : "%{network.transport} request discarded from %{source.address}/%{source.port} to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port}",
          "if" : "ctx._temp_.cisco.message_id == '710005'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "Group = %{}, IP = %{source.address}, Security negotiation complete for LAN-to-LAN Group (%{}) %{}, Inbound SPI = %{}, Outbound SPI = %{}",
          "if" : "ctx._temp_.cisco.message_id == '713049'"
        }
      },
      {
        "dissect" : {
          "pattern" : "Group %{} User %{source.user.name} IP %{source.address} WebVPN session terminated: User Requested.",
          "if" : "ctx._temp_.cisco.message_id == '716002'",
          "field" : "message"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '722051'",
          "field" : "message",
          "pattern" : "Group %{} User %{source.user.name} IP %{source.address} IPv4 Address %{_temp_.cisco.assigned_ip} %{}"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "[%{_temp_.cisco.burst.object}] drop %{_temp_.cisco.burst.id} exceeded. Current burst rate is %{_temp_.cisco.burst.current_rate} per second, max configured rate is %{_temp_.cisco.burst.configured_rate}; Current average rate is %{_temp_.cisco.burst.avg_rate} per second, max configured rate is %{_temp_.cisco.burst.configured_avg_rate}; Cumulative total count is %{_temp_.cisco.burst.cumulative_count}",
          "if" : "ctx._temp_.cisco.message_id == '733100'"
        }
      },
      {
        "dissect" : {
          "field" : "message",
          "pattern" : "DAP: User %{user.email}, Addr %{source.address}, Connection %{_temp_.cisco.connection_type}: The following DAP records were selected for this connection: %{_temp_.cisco.dap_records->}",
          "if" : "ctx._temp_.cisco.message_id == '734001'"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '805001'",
          "field" : "message",
          "pattern" : "Offloaded %{network.transport} for connection %{_temp_.cisco.connection_id} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})"
        }
      },
      {
        "dissect" : {
          "if" : "ctx._temp_.cisco.message_id == '805002'",
          "field" : "message",
          "pattern" : "%{network.transport} Flow is no longer offloaded for connection %{_temp_.cisco.connection_id} from %{_temp_.cisco.source_interface}:%{source.address}/%{source.port} (%{_temp_.natsrcip}/%{_temp_.cisco.mapped_source_port}) to %{_temp_.cisco.destination_interface}:%{destination.address}/%{destination.port} (%{_temp_.natdstip}/%{_temp_.cisco.mapped_destination_port})"
        }
      },
      {
        "split" : {
          "ignore_missing" : true,
          "field" : "_temp_.cisco.dap_records",
          "separator" : """,\s+"""
        }
      },
      {
        "set" : {
          "if" : """["302012", "302014", "302016", "302018", "302020", "302021", "302036", "302304", "302306", "609001", "609002"].contains(ctx._temp_.cisco.message_id)""",
          "field" : "event.action",
          "value" : "flow-expiration"
        }
      },
      {
        "grok" : {
          "pattern_definitions" : {
            "ECSDESTIPORHOST" : "(?:%{IP:destination.address}|%{HOSTNAME:destination.domain})",
            "MAPPEDSRC" : "(?:%{DATA:_temp_.natsrcip}|%{HOSTNAME})",
            "NOTCOLON" : "[^:]*",
            "ECSSOURCEIPORHOST" : "(?:%{IP:source.address}|%{HOSTNAME:source.domain})"
          },
          "field" : "message",
          "if" : """["302014", "302016", "302018", "302021", "302036", "302304", "302306"].contains(ctx._temp_.cisco.message_id)""",
          "patterns" : [
            """Teardown %{NOTSPACE:network.transport} (?:state-bypass )?connection %{NOTSPACE:_temp_.cisco.connection_id} (?:for|from) %{NOTCOLON:_temp_.cisco.source_interface}:%{DATA:source.address}/%{NUMBER:source.port:int}\s*(?:%{NOTSPACE:_temp_.cisco.source_username} )?to %{NOTCOLON:_temp_.cisco.destination_interface}:%{DATA:destination.address}/%{NUMBER:destination.port:int}\s*(?:%{NOTSPACE:_temp_.cisco.destination_username} )?(?:duration %{TIME:_temp_.duration_hms} bytes %{NUMBER:network.bytes:int})%{GREEDYDATA}""",
            """Teardown %{NOTSPACE:network.transport} connection for faddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSDESTIPORHOST}/%{NUMBER}\s*(?:%{NOTSPACE:_temp_.cisco.destination_username} )?gaddr (?:%{NOTCOLON}:)?%{MAPPEDSRC}/%{NUMBER} laddr (?:%{NOTCOLON:_temp_.cisco.source_interface}:)?%{ECSSOURCEIPORHOST}/%{NUMBER}\s*(?:%{NOTSPACE:_temp_.cisco.source_username})?%{GREEDYDATA}"""
          ]
        }
      },
      {
        "kv" : {
          "ignore_failure" : true,
          "if" : """["430001", "430002", "430003", "430004", "430005", ""].contains(ctx._temp_.cisco.message_id)""",
          "field" : "message",
          "field_split" : """,(?=[A-za-z1-9\s]+:)""",
          "value_split" : ":",
          "target_field" : "_temp_.orig_security",
          "trim_key" : " ",
          "trim_value" : " "
        }
      },
      {
        "remove" : {
          "field" : [
            "message"
          ],
          "ignore_missing" : true
        }
      },
      {
        "script" : {
          "if" : "ctx._temp_?.orig_security != null",
          "params" : {
            "Prefilter Policy" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "prefilter_policy"
            },
            "DNSRecordType" : {
              "ecs" : [
                "dns.question.type"
              ],
              "target" : "dns_record_type",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "WebApplication" : {
              "target" : "web_application",
              "ecs" : [
                "network.application"
              ]
            },
            "IntrusionPolicy" : {
              "ecs" : [
                "_temp_.cisco.rule_name"
              ],
              "target" : "intrusion_policy",
              "id" : [
                "430001"
              ]
            },
            "DNS_TTL" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "dns_ttl"
            },
            "FileSandboxStatus" : {
              "target" : "file_sandbox_status",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "Endpoint Profile" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "endpoint_profile"
            },
            "FileStorageStatus" : {
              "target" : "file_storage_status",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "Protocol" : {
              "target" : "protocol",
              "ecs" : [
                "network.transport"
              ]
            },
            "MPLS_Label" : {
              "target" : "mpls_label",
              "id" : [
                "430001"
              ]
            },
            "AccessControlRuleReason" : {
              "target" : "access_control_rule_reason",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "HTTPReferer" : {
              "target" : "http_referer",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "http.request.referrer"
              ]
            },
            "IngressZone" : {
              "target" : "ingress_zone",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "SSLRuleName" : {
              "target" : "ssl_rule_name",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "FileSHA256" : {
              "target" : "file_sha256",
              "id" : [
                "430004",
                "430005"
              ],
              "ecs" : [
                "file.hash.sha256"
              ]
            },
            "ReferencedHost" : {
              "ecs" : [
                "url.domain"
              ],
              "target" : "referenced_host",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "DNSSICategory" : {
              "target" : "dnssi_category",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "SSLPolicy" : {
              "target" : "ssl_policy",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "DNSResponseType" : {
              "target" : "dns_response_type",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "dns.response_code"
              ]
            },
            "ICMPCode" : {
              "target" : "icmp_code",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "SrcPort" : {
              "target" : "src_port",
              "ecs" : [
                "source.port"
              ]
            },
            "FilePolicy" : {
              "ecs" : [
                "_temp_.cisco.rule_name"
              ],
              "target" : "file_policy",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "DNS_Sinkhole" : {
              "target" : "dns_sinkhole",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "InlineResult" : {
              "target" : "inline_result",
              "id" : [
                "430001"
              ],
              "ecs" : [
                "event.outcome"
              ]
            },
            "Revision" : {
              "target" : "revision",
              "id" : [
                "430001"
              ]
            },
            "FileType" : {
              "target" : "file_type",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "SSLServerName" : {
              "ecs" : [
                "server.domain"
              ],
              "target" : "ssl_server_name",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "FileCount" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "file_count"
            },
            "SSLActualAction" : {
              "target" : "ssl_actual_action",
              "ecs" : [
                "event.outcome"
              ]
            },
            "TCPFlags" : {
              "target" : "tcp_flags",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "FileName" : {
              "target" : "file_name",
              "id" : [
                "430004",
                "430005"
              ],
              "ecs" : [
                "file.name"
              ]
            },
            "User" : {
              "target" : "user",
              "ecs" : [
                "user.id",
                "user.name"
              ]
            },
            "SecIntMatchingIP" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "sec_int_matching_ip"
            },
            "SHA_Disposition" : {
              "target" : "sha_disposition",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "ThreatName" : {
              "ecs" : [
                "_temp_.cisco.threat_category"
              ],
              "target" : "threat_name",
              "id" : [
                "430005"
              ]
            },
            "SperoDisposition" : {
              "target" : "spero_disposition",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "Tunnel or Prefilter Rule" : {
              "target" : "tunnel_or_prefilter_rule",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ResponderBytes" : {
              "id" : [
                "430003"
              ],
              "ecs" : [
                "destination.bytes"
              ],
              "target" : "responder_bytes"
            },
            "SSLExpectedAction" : {
              "target" : "ssl_expected_action",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "Client" : {
              "target" : "client",
              "ecs" : [
                "network.application"
              ]
            },
            "DNSQuery" : {
              "ecs" : [
                "dns.question.name"
              ],
              "target" : "dns_query",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ConnectionDuration" : {
              "target" : "connection_duration",
              "id" : [
                "430003"
              ],
              "ecs" : [
                "event.duration"
              ]
            },
            "originalClientSrcIP" : {
              "target" : "original_client_src_ip",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "client.address"
              ]
            },
            "FileDirection" : {
              "target" : "file_direction",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "SSLServerCertStatus" : {
              "target" : "ssl_server_cert_status",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "DstPort" : {
              "target" : "dst_port",
              "ecs" : [
                "destination.port"
              ]
            },
            "SrcIP" : {
              "target" : "src_ip",
              "ecs" : [
                "source.address"
              ]
            },
            "IPSCount" : {
              "target" : "ips_count",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ACPolicy" : {
              "ecs" : [
                "_temp_.cisco.rule_name"
              ],
              "target" : "ac_policy",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "ArchiveFileName" : {
              "ecs" : [
                "file.name"
              ],
              "target" : "archive_file_name",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "GID" : {
              "target" : "gid",
              "id" : [
                "430001"
              ],
              "ecs" : [
                "service.id"
              ]
            },
            "InitiatorBytes" : {
              "target" : "initiator_bytes",
              "id" : [
                "430003"
              ],
              "ecs" : [
                "source.bytes"
              ]
            },
            "ArchiveDepth" : {
              "id" : [
                "430004",
                "430005"
              ],
              "target" : "archive_depth"
            },
            "NAPPolicy" : {
              "target" : "nap_policy",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "FileSize" : {
              "ecs" : [
                "file.size"
              ],
              "target" : "file_size",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "ICMPType" : {
              "target" : "icmp_type",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "SSLCertificate" : {
              "target" : "ssl_certificate",
              "id" : [
                "430002",
                "430003",
                "430004",
                "430005"
              ]
            },
            "FileAction" : {
              "target" : "file_action",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "DstIP" : {
              "target" : "dst_ip",
              "ecs" : [
                "destination.address"
              ]
            },
            "URLSICategory" : {
              "target" : "urlsi_category",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ClientVersion" : {
              "target" : "client_version",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "IngressInterface" : {
              "target" : "ingress_interface",
              "id" : [
                "430001",
                "430002",
                "430003"
              ],
              "ecs" : [
                "_temp_.cisco.source_interface"
              ]
            },
            "SSLVersion" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "ssl_version"
            },
            "Message" : {
              "ecs" : [
                "message"
              ],
              "target" : "message",
              "id" : [
                "430001"
              ]
            },
            "IPReputationSICategory" : {
              "target" : "ip_reputation_si_category",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ArchiveFileStatus" : {
              "target" : "archive_file_status",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "URLReputation" : {
              "target" : "url_reputation",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "URLCategory" : {
              "target" : "url_category",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "HTTPResponse" : {
              "target" : "http_response",
              "id" : [
                "430001",
                "430002",
                "430003"
              ],
              "ecs" : [
                "http.response.status_code"
              ]
            },
            "AccessControlRuleName" : {
              "target" : "access_control_rule_name",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "_temp_.cisco.rule_name"
              ]
            },
            "ArchiveSHA256" : {
              "id" : [
                "430004",
                "430005"
              ],
              "ecs" : [
                "file.hash.sha256"
              ],
              "target" : "archive_sha256"
            },
            "VLAN_ID" : {
              "target" : "vlan_id",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "SSLSessionID" : {
              "target" : "ssl_session_id",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "InitiatorPackets" : {
              "ecs" : [
                "source.packets"
              ],
              "target" : "initiator_packets",
              "id" : [
                "430003"
              ]
            },
            "SSSLCipherSuite" : {
              "target" : "sssl_cipher_suite",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "Classification" : {
              "target" : "classification",
              "id" : [
                "430001"
              ]
            },
            "Security Group" : {
              "target" : "security_group",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "AccessControlRuleAction" : {
              "target" : "access_control_rule_action",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "event.outcome"
              ]
            },
            "NetBIOSDomain" : {
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "host.hostname"
              ],
              "target" : "net_bios_domain"
            },
            "SSLTicketID" : {
              "target" : "ssl_ticket_id",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "ApplicationProtocol" : {
              "target" : "application_protocol",
              "ecs" : [
                "network.protocol"
              ]
            },
            "EgressInterface" : {
              "target" : "egress_interface",
              "id" : [
                "430001",
                "430002",
                "430003"
              ],
              "ecs" : [
                "_temp_.cisco.destination_interface"
              ]
            },
            "ResponderPackets" : {
              "target" : "responder_packets",
              "id" : [
                "430003"
              ],
              "ecs" : [
                "destination.packets"
              ]
            },
            "ThreatScore" : {
              "target" : "threat_score",
              "id" : [
                "430005"
              ],
              "ecs" : [
                "_temp_.cisco.threat_level"
              ]
            },
            "UserAgent" : {
              "ecs" : [
                "user_agent.original"
              ],
              "target" : "user_agent",
              "id" : [
                "430002",
                "430003"
              ]
            },
            "FirstPacketSecond" : {
              "ecs" : [
                "event.start"
              ],
              "target" : "first_packet_second",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "EgressZone" : {
              "target" : "egress_zone",
              "id" : [
                "430001",
                "430002",
                "430003"
              ]
            },
            "URI" : {
              "ecs" : [
                "url.original"
              ],
              "target" : "uri",
              "id" : [
                "430004",
                "430005"
              ]
            },
            "SSLURLCategory" : {
              "id" : [
                "430002",
                "430003"
              ],
              "target" : "sslurl_category"
            },
            "SID" : {
              "target" : "sid",
              "id" : [
                "430001"
              ]
            },
            "NumIOC" : {
              "target" : "num_ioc",
              "id" : [
                "430001"
              ]
            },
            "URL" : {
              "target" : "url",
              "id" : [
                "430002",
                "430003"
              ],
              "ecs" : [
                "url.original"
              ]
            },
            "SSLFlowStatus" : {
              "target" : "ssl_flow_status",
              "id" : [
                "430002",
                "430003",
                "430004",
                "430005"
              ]
            },
            "Priority" : {
              "target" : "priority",
              "id" : [
                "430001"
              ]
            }
          },
          "lang" : "painless",
          "source" : """boolean isEmpty(def value) {
  return (value instanceof AbstractList? value.size() : value.length()) == 0;
}
def appendOrCreate(Map dest, String[] path, def value) {
 for (int i=0; i<path.length-1; i++) {
  dest = dest.computeIfAbsent(path[i], _ -> new HashMap());
 }
 String key = path[path.length - 1];
 def existing = dest.get(key);
 return existing == null?
  dest.put(key, value)
  : existing instanceof AbstractList?
    existing.add(value)
    : dest.put(key, new ArrayList([existing, value]));
}
def msg = ctx._temp_.orig_security;
def counters = new HashMap();
def dest = new HashMap();
ctx._temp_.cisco['security'] = dest;
for (entry in msg.entrySet()) {
 def param = params.get(entry.getKey());
 if (param == null) {
   continue;
 }
 param.getOrDefault('id', []).forEach( id -> counters[id] = 1 + counters.getOrDefault(id, 0) );
 if (!isEmpty(entry.getValue())) {
  param.getOrDefault('ecs', []).forEach( field -> appendOrCreate(ctx, field.splitOnToken('.'), entry.getValue()) );
  dest[param.target] = entry.getValue();
 }
}
if (ctx._temp_.cisco.message_id != "") return;
def best;
for (entry in counters.entrySet()) {
 if (best == null || best.getValue() < entry.getValue()) best = entry;
}
if (best != null) ctx._temp_.cisco.message_id = best.getKey();
"""
        }
      },
      {
        "script" : {
          "lang" : "painless",
          "params" : {
            "ctx._temp_.cisco.message_id" : {
              "target" : "event.action",
              "map" : {
                "430001" : "intrusion-detected",
                "430002" : "connection-started",
                "430003" : "connection-finished",
                "430004" : "file-detected",
                "430005" : "malware-detected"
              }
            },
            "dns.question.type" : {
              "map" : {
                "marks the start of a zone of authority" : "SOA",
                "an authoritative name server" : "NS",
                "text strings" : "TXT",
                "mail exchange" : "MX",
                "server selection" : "SRV",
                "a host address" : "A",
                "ip6 address" : "AAAA",
                "the canonical name for an alias" : "CNAME",
                "a domain name pointer" : "PTR"
              }
            },
            "dns.response_code" : {
              "map" : {
                "non-existent domain" : "NXDOMAIN",
                "server failure" : "SERVFAIL",
                "query refused" : "REFUSED",
                "no error" : "NOERROR"
              }
            }
          },
          "source" : """def getField(Map src, String[] path) {
 for (int i=0; i<path.length-1; i++) {
  src = src.getOrDefault(path[i], null);
  if (src == null || !(src instanceof Map)) {
    return null;
  }
 }
 return src[path[path.length-1]];
}
def setField(Map dest, String[] path, def value) {
 for (int i=0; i<path.length-1; i++) {
   dest = dest.computeIfAbsent(path[i], _ -> new HashMap());
 }
 dest[path[path.length-1]] = value;
}
for (entry in params.entrySet()) {
  def srcField = entry.getKey();
  def param = entry.getValue();
  String oldVal = getField(ctx, srcField.splitOnToken('.'));
  if (oldVal == null) continue;
  def newVal = param.map?.getOrDefault(oldVal.toLowerCase(), null);
  if (newVal != null) {
    def dstField = param.getOrDefault('target', srcField);
    setField(ctx, dstField.splitOnToken('.'), newVal);
  }
}
"""
        }
      },
      {
        "set" : {
          "if" : "ctx.dns?.question?.type != null && ctx.dns?.response_code == null",
          "field" : "dns.response_code",
          "value" : "NOERROR"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == \"430001\"",
          "field" : "event.action",
          "value" : "intrusion-detected"
        }
      },
      {
        "set" : {
          "field" : "event.action",
          "value" : "connection-started",
          "if" : "ctx._temp_.cisco.message_id == \"430002\""
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == \"430003\"",
          "field" : "event.action",
          "value" : "connection-finished"
        }
      },
      {
        "set" : {
          "if" : "ctx._temp_.cisco.message_id == \"430004\"",
          "field" : "event.action",
          "value" : "file-detected"
        }
      },
      {
        "set" : {
          "field" : "event.action",
          "value" : "malware-detected",
          "if" : "ctx._temp_.cisco.message_id == \"430005\""
        }
      },
      {
        "set" : {
          "field" : "_temp_.duration_hms",
          "value" : "{{event.duration}}",
          "ignore_empty_value" : true
        }
      },
      {
        "script" : {
          "lang" : "painless",
          "if" : "ctx?._temp_?.duration_hms != null",
          "source" : """long parse_hms(String s) {
    long cur = 0, total = 0;
    for (char c: s.toCharArray()) {
        if (c >= (char)'0' && c <= (char)'9') {
            cur = (cur*10) + (long)c - (char)'0';
        } else if (c == (char)':') {
            total = (total + cur) * 60;
            cur = 0;
        } else {
            return 0;
        }
    }
    return total + cur;
} if (ctx?.event == null) {
    ctx['event'] = new HashMap();
} String end = ctx['@timestamp']; ctx.event['end'] = end; long nanos = parse_hms(ctx._temp_.duration_hms) * 1000000000L; ctx.event['duration'] = nanos; ctx.event['start'] = ZonedDateTime.ofInstant(
    Instant.parse(end).minusNanos(nanos),
    ZoneOffset.UTC);
"""
        }
      },
      {
        "lowercase" : {
          "field" : "network.transport",
          "ignore_failure" : true
        }
      },
      {
        "lowercase" : {
          "field" : "network.protocol",
          "ignore_failure" : true
        }
      },
      {
        "lowercase" : {
          "ignore_failure" : true,
          "field" : "network.application"
        }
      },
      {
        "lowercase" : {
          "field" : "file.type",
          "ignore_failure" : true
        }
      },
      {
        "lowercase" : {
          "field" : "network.direction",
          "ignore_failure" : true
        }
      },
      {
        "script" : {
          "source" : """def net = ctx.network; def iana = params[net.transport]; if (iana != null) {
  net['iana_number'] = iana;
  return;
} def reverse = new HashMap(); def[] arr = new def[] { null }; for (entry in params.entrySet()) {
  arr[0] = entry.getValue();
  reverse.put(String.format("%d", arr), entry.getKey());
} def trans = reverse[net.transport]; if (trans != null) {
  net['iana_number'] = net.transport;
  net['transport'] = trans;
}
""",
          "if" : "ctx?.network?.transport != null",
          "lang" : "painless",
          "params" : {
            "igmp" : 2,
            "rsvp" : 46,
            "ipv6" : 41,
            "tcp" : 6,
            "icmp" : 1,
            "egp" : 8,
            "idpr" : 35,
            "igp" : 9,
            "udp" : 17,
            "irtp" : 28,
            "ipv6-frag" : 44,
            "esp" : 50,
            "dccp" : 33,
            "ipv6-nonxt" : 59,
            "rdp" : 27,
            "ipv6-route" : 43,
            "gre" : 47,
            "ipv6-icmp" : 58,
            "ipv6-opts" : 60,
            "ipv4" : 4,
            "pup" : 12
          }
        }
      },
      {
        "lowercase" : {
          "field" : "event.outcome",
          "ignore_missing" : true
        }
      },
      {
        "set" : {
          "field" : "event.outcome",
          "if" : "ctx.event?.outcome == \"est-allowed\"",
          "value" : "allow"
        }
      },
      {
        "set" : {
          "value" : "allow",
          "field" : "event.outcome",
          "if" : "ctx.event?.outcome == \"permitted\""
        }
      },
      {
        "set" : {
          "value" : "deny",
          "field" : "event.outcome",
          "if" : "ctx.event?.outcome == \"denied\""
        }
      },
      {
        "set" : {
          "if" : "ctx.event?.outcome == \"dropped\"",
          "value" : "deny",
          "field" : "event.outcome"
        }
      },
      {
        "set" : {
          "field" : "network.transport",
          "if" : "ctx.network?.transport == \"icmpv6\"",
          "value" : "ipv6-icmp"
        }
      },
      {
        "convert" : {
          "field" : "source.port",
          "type" : "integer",
          "ignore_failure" : true
        }
      },
      {
        "convert" : {
          "ignore_failure" : true,
          "field" : "destination.port",
          "type" : "integer"
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "source.bytes"
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "destination.bytes"
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "source.packets"
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "destination.packets"
        }
      },
      {
        "convert" : {
          "field" : "_temp_.cisco.mapped_source_port",
          "type" : "integer",
          "ignore_failure" : true
        }
      },
      {
        "convert" : {
          "field" : "_temp_.cisco.mapped_destination_port",
          "type" : "integer",
          "ignore_failure" : true
        }
      },
      {
        "convert" : {
          "ignore_failure" : true,
          "field" : "_temp_.cisco.icmp_code",
          "type" : "integer"
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "_temp_.cisco.icmp_type"
        }
      },
      {
        "convert" : {
          "field" : "network.iana_number",
          "type" : "integer",
          "ignore_failure" : true
        }
      },
      {
        "grok" : {
          "ignore_failure" : true,
          "field" : "source.address",
          "patterns" : [
            "(?:%{IP:source.ip}|%{GREEDYDATA:source.domain})"
          ]
        }
      },
      {
        "grok" : {
          "patterns" : [
            "(?:%{IP:destination.ip}|%{GREEDYDATA:destination.domain})"
          ],
          "ignore_failure" : true,
          "field" : "destination.address"
        }
      },
      {
        "grok" : {
          "ignore_failure" : true,
          "field" : "client.address",
          "patterns" : [
            "(?:%{IP:client.ip}|%{GREEDYDATA:client.domain})"
          ]
        }
      },
      {
        "grok" : {
          "ignore_failure" : true,
          "field" : "server.address",
          "patterns" : [
            "(?:%{IP:server.ip}|%{GREEDYDATA:server.domain})"
          ]
        }
      },
      {
        "geoip" : {
          "ignore_missing" : true,
          "field" : "source.ip",
          "target_field" : "source.geo"
        }
      },
      {
        "geoip" : {
          "field" : "destination.ip",
          "target_field" : "destination.geo",
          "ignore_missing" : true
        }
      },
      {
        "geoip" : {
          "database_file" : "GeoLite2-ASN.mmdb",
          "field" : "source.ip",
          "target_field" : "source.as",
          "properties" : [
            "asn",
            "organization_name"
          ],
          "ignore_missing" : true
        }
      },
      {
        "geoip" : {
          "field" : "destination.ip",
          "target_field" : "destination.as",
          "properties" : [
            "asn",
            "organization_name"
          ],
          "ignore_missing" : true,
          "database_file" : "GeoLite2-ASN.mmdb"
        }
      },
      {
        "rename" : {
          "ignore_missing" : true,
          "field" : "source.as.asn",
          "target_field" : "source.as.number"
        }
      },
      {
        "rename" : {
          "field" : "source.as.organization_name",
          "target_field" : "source.as.organization.name",
          "ignore_missing" : true
        }
      },
      {
        "rename" : {
          "field" : "destination.as.asn",
          "target_field" : "destination.as.number",
          "ignore_missing" : true
        }
      },
      {
        "rename" : {
          "field" : "destination.as.organization_name",
          "target_field" : "destination.as.organization.name",
          "ignore_missing" : true
        }
      },
      {
        "grok" : {
          "field" : "_temp_.natsrcip",
          "patterns" : [
            "(?:%{IP:_temp_.cisco.mapped_source_ip}|%{GREEDYDATA:_temp_.cisco.mapped_source_host})"
          ],
          "ignore_failure" : true
        }
      },
      {
        "grok" : {
          "patterns" : [
            "(?:%{IP:_temp_.cisco.mapped_destination_ip}|%{GREEDYDATA:_temp_.cisco.mapped_destination_host})"
          ],
          "ignore_failure" : true,
          "field" : "_temp_.natdstip"
        }
      },
      {
        "set" : {
          "value" : "{{_temp_.cisco.mapped_source_ip}}",
          "if" : "ctx?._temp_?.cisco?.mapped_source_ip != ctx?.source?.ip",
          "ignore_empty_value" : true,
          "field" : "source.nat.ip"
        }
      },
      {
        "set" : {
          "field" : "source.nat.port",
          "value" : "{{_temp_.cisco.mapped_source_port}}",
          "if" : "ctx?._temp_?.cisco?.mapped_source_port != ctx?.source?.port",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "field" : "destination.nat.ip",
          "value" : "{{_temp_.cisco.mapped_destination_ip}}",
          "if" : "ctx?._temp_?.cisco.mapped_destination_ip != ctx?.destination?.ip",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "field" : "destination.nat.port",
          "value" : "{{_temp_.cisco.mapped_destination_port}}",
          "if" : "ctx?._temp_?.cisco?.mapped_destination_port != ctx?.destination?.port",
          "ignore_empty_value" : true
        }
      },
      {
        "convert" : {
          "type" : "integer",
          "ignore_failure" : true,
          "field" : "_temp_.cisco.message_id",
          "target_field" : "event.code"
        }
      },
      {
        "remove" : {
          "if" : "ctx._temp_.cisco.message_id == \"\"",
          "ignore_failure" : true,
          "field" : [
            "_temp_.cisco.message_id",
            "event.code"
          ]
        }
      },
      {
        "rename" : {
          "target_field" : "cisco.asa",
          "ignore_failure" : true,
          "field" : "_temp_.cisco"
        }
      },
      {
        "remove" : {
          "field" : "_temp_",
          "ignore_missing" : true
        }
      },
      {
        "rename" : {
          "target_field" : "event.original",
          "ignore_missing" : true,
          "field" : "log.original"
        }
      },
      {
        "rename" : {
          "target_field" : "cisco.asa.rule_name",
          "ignore_missing" : true,
          "field" : "cisco.asa.list_id"
        }
      },
      {
        "script" : {
          "params" : {
            "file-detected" : {
              "category" : [
                "malware"
              ],
              "type" : [
                "info"
              ],
              "kind" : "alert"
            },
            "firewall-rule" : {
              "kind" : "event",
              "category" : [
                "network"
              ],
              "type" : [
                "info"
              ]
            },
            "flow-expiration" : {
              "kind" : "event",
              "category" : [
                "network"
              ],
              "type" : [
                "connection",
                "end"
              ]
            },
            "intrusion-detected" : {
              "kind" : "alert",
              "category" : [
                "intrusion_detection"
              ],
              "type" : [
                "info"
              ]
            },
            "malware-detected" : {
              "type" : [
                "info"
              ],
              "kind" : "alert",
              "category" : [
                "malware"
              ]
            },
            "connection-finished" : {
              "category" : [
                "network"
              ],
              "type" : [
                "connection",
                "end"
              ],
              "kind" : "event"
            },
            "connection-started" : {
              "category" : [
                "network"
              ],
              "type" : [
                "connection",
                "start"
              ],
              "kind" : "event"
            }
          },
          "source" : """if (ctx?.event?.action == null || !params.containsKey(ctx.event.action)) {
  return;
} ctx.event.kind = params.get(ctx.event.action).get('kind'); ctx.event.category = params.get(ctx.event.action).get('category').clone(); ctx.event.type = params.get(ctx.event.action).get('type').clone();
if (ctx?.event?.outcome == null) {
  return;
} if (ctx.event.category.contains('network') || ctx.event.category.contains('intrusion_detection')) {
  if (ctx.event.outcome == 'allow') {
    ctx.event.type.add('allowed');
  }
  if (ctx.event.outcome == 'deny') {
    ctx.event.type.add('denied');
  }
  if (ctx.event.outcome == 'block') {
    ctx.event.type.add('denied');
  }
}""",
          "lang" : "painless"
        }
      },
      {
        "set" : {
          "field" : "observer.hostname",
          "value" : "{{ host.hostname }}",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "field" : "observer.vendor",
          "value" : "Cisco",
          "ignore_empty_value" : true
        }
      },
      {
        "set" : {
          "ignore_empty_value" : true,
          "field" : "observer.type",
          "value" : "firewall"
        }
      },
      {
        "set" : {
          "value" : "asa",
          "ignore_empty_value" : true,
          "field" : "observer.product"
        }
      },
      {
        "set" : {
          "value" : "{{ cisco.asa.source_interface }}",
          "ignore_empty_value" : true,
          "field" : "observer.egress.interface.name"
        }
      },
      {
        "set" : {
          "value" : "{{ cisco.asa.destination_interface }}",
          "ignore_empty_value" : true,
          "field" : "observer.ingress.interface.name"
        }
      },
      {
        "append" : {
          "field" : "related.ip",
          "value" : "{{source.ip}}",
          "if" : "ctx?.source?.ip != null"
        }
      },
      {
        "append" : {
          "if" : "ctx?.destination?.ip != null",
          "field" : "related.ip",
          "value" : "{{destination.ip}}"
        }
      },
      {
        "append" : {
          "field" : "related.user",
          "value" : "{{user.name}}",
          "if" : "ctx?.user?.name != null"
        }
      },
      {
        "append" : {
          "value" : "{{file.hash.sha256}}",
          "if" : "ctx?.file?.hash?.sha256 != null",
          "field" : "related.hash"
        }
      },
      {
        "append" : {
          "if" : "ctx.host?.hostname != null && ctx.host?.hostname != ''",
          "allow_duplicates" : false,
          "field" : "related.hosts",
          "value" : "{{host.hostname}}"
        }
      },
      {
        "append" : {
          "field" : "related.hosts",
          "value" : "{{observer.hostname}}",
          "if" : "ctx.observer?.hostname != null && ctx.observer?.hostname != ''",
          "allow_duplicates" : false
        }
      },
      {
        "append" : {
          "field" : "related.hosts",
          "value" : "{{destination.domain}}",
          "if" : "ctx.destination?.domain != null && ctx.destination?.domain != ''",
          "allow_duplicates" : false
        }
      },
      {
        "append" : {
          "value" : "{{source.domain}}",
          "if" : "ctx.source?.domain != null && ctx.source?.domain != ''",
          "allow_duplicates" : false,
          "field" : "related.hosts"
        }
      }
    ],
    "on_failure" : [
      {
        "rename" : {
          "field" : "_temp_.cisco",
          "target_field" : "cisco.asa",
          "ignore_failure" : true
        }
      },
      {
        "remove" : {
          "field" : "_temp_",
          "ignore_missing" : true
        }
      },
      {
        "append" : {
          "field" : "error.message",
          "value" : "{{ _ingest.on_failure_message }}"
        }
      }
  ],
  "on_failure" : [
    {
      "set" : {
        "field" : "error.message",
        "value" : "{{ _ingest.on_failure_message }}"
      }
    }
  ]
}