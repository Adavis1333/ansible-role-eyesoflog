--- 
- name: Install Elasticsearch
  hosts: elasticsearch_nodes
  vars:
    elasticsearch_repo_name : "8.x"

  tasks:

    - name: Ensure libselinux-python on CentOS 6.x
      become: yes
      yum: name=libselinux-python state=present update_cache=yes

    - name: RedHat - add Elasticsearch repo
      become: yes
      template:
        src: 'elasticsearch.repo'
        dest: '/etc/yum.repos.d/elasticsearch-{{ es_version }}.repo'
      

    - name: RedHat - remove unused Elasticsearch repo
      become: yes
      file:
        path: '/etc/yum.repos.d/elasticsearch-{{ es_version }}.repo'
        state: absent
      when: es_use_repository

    - name: RedHat - Install Elasticsearch
      become: yes
      yum:
        name: '{% if es_custom_package_url is defined %}{{ es_custom_package_url }}{% else %}{{ es_rpm_url }}{% endif %}'
        state: present
      when: not es_use_repository
      register: elasticsearch_install_from_package

  # Elasticsearch Configuration
    - name: Create Configuration Directory
      become: yes
      file:
        path: "{{ es_conf_dir }}"
        state: directory
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "2750"

    #Create required directories
    - name: Create Others Directories
      become: yes
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "2750"
      with_items:
        - "{{ es_log_dir }}"
        - "{{ es_data_dirs }}"

    #Copy the config template
    - name: Copy Configuration File
      become: yes
      template:
        src: templates/elasticsearch.yml.j2
        dest: "{{ es_conf_dir }}/elasticsearch.yml"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "660"
        force: yes
      register: system_change

    #Copy the default file
    - name: Copy Default File
      become: yes
      template:
        src: "{{ es_config_default }}"
        dest: "{{ default_file }}"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "660"
        force: yes


    - name: set fact use_system_d
      set_fact: use_system_d={{ (ansible_distribution == 'Debian' and ansible_distribution_version is version('8', '>=')) or (ansible_distribution in ['RedHat','CentOS'] and ansible_distribution_version is version('7', '>=')) or (ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('15', '>=')) or (ansible_distribution == 'Amazon' and ansible_distribution_version is version('2', '>=')) }}
   
    - name: set fact m_lock_enabled
      set_fact: m_lock_enabled={{ es_config['bootstrap.memory_lock'] is defined and es_config['bootstrap.memory_lock'] == True }}

    #Copy the systemd specific file if systemd is installed
    - when: use_system_d is defined
      become: yes
      block:
        - name: Make sure destination dir exists
          file:
            path: "{{ sysd_config_file }}"
            state: directory
            mode: "755"

        - name: Copy specific ElasticSearch Systemd config file
          template:
            src: "override.conf.j2"
            dest: "{{ sysd_config_file }}"
            owner: "{{ es_user }}"
            group: "{{ es_group }}"
            mode: "644"
            force: yes
          notify:
          - reload systemd configuration
          

    ### START BLOCK elasticsearch keystore ###
    - name: create the elasticsearch keystore
      block:
      - name: create the keystore if it doesn't exist yet
        become: yes
        command: >
          {{es_home}}/bin/elasticsearch-keystore create
        args:
          creates: "{{ es_conf_dir }}/elasticsearch.keystore"
        environment:
          ES_PATH_CONF: "{{ es_conf_dir }}"

      - name: Check if bootstrap password is set
        become: yes
        command: >
         {{es_home}}/bin/elasticsearch-keystore list
        register: list_keystore
        changed_when: False
        environment:
          ES_PATH_CONF: "{{ es_conf_dir }}"
        check_mode: no

      - name: Create Bootstrap password for elastic user
        become: yes
        shell: echo {{ es_api_basic_auth_password | quote }} | {{ es_home }}/bin/elasticsearch-keystore add -x 'bootstrap.password'
        when:
          - es_api_basic_auth_username is defined and list_keystore is defined and es_api_basic_auth_username == 'elastic' and 'bootstrap.password' not in list_keystore.stdout_lines
        environment:
          ES_PATH_CONF: "{{ es_conf_dir }}"
        no_log: true

    - name: Ensure certificate directory exists
      become: yes
      file:
        dest: "{{ es_ssl_certificate_path }}"
        state: directory
        owner: root
        group: "{{ es_group }}"
        mode: "750"
      when: es_ssl_upload

    - name: Upload SSL/TLS key and certificate
      become: yes
      copy:
        src: "{{ item }}"
        dest: "{{ es_ssl_certificate_path }}/{{ item | basename }}"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "640"
      with_items:
        - "{{ es_ssl_key }}"
        - "{{ es_ssl_certificate }}"
      when: es_ssl_upload and es_ssl_key and es_ssl_certificate
      #Restart if these change
      register: copy_certificates
 
    - name: Upload SSL Certificate Authority
      become: yes
      copy:
        src: "{{ es_ssl_certificate_authority }}"
        dest: "{{ es_ssl_certificate_path }}/{{ es_ssl_certificate_authority | basename }}"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "640"
      #Restart if this changes
      when: es_ssl_upload and (es_ssl_certificate_authority is defined) and (es_ssl_certificate_authority|length > 0)

    - name: ensure templates dir is created
      file:
        path: "{{ es_conf_dir }}/templates"
        state: directory
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "2750"

    - name: Copy templates to elasticsearch
      copy: src={{ item }} dest={{ es_conf_dir }}/templates owner=root group={{ es_group }} mode=0660
      register: load_templates
      with_fileglob:
        - "{{ es_templates_fileglob | default('') }}"

    - name: Install templates
      uri:
        url: "{{ es_api_uri }}/_template/{{item | filename}}"
        method: PUT
        status_code: 200
        user: "{{es_api_basic_auth_username | default(omit)}}"
        password: "{{es_api_basic_auth_password | default(omit)}}"
        force_basic_auth: yes
        body_format: json
        body: "{{ lookup('file', item) }}"
        validate_certs: "{{ es_validate_certs }}"
      when: load_templates.changed and es_start_service
      with_fileglob:
        - "{{ es_templates_fileglob | default('') }}"
      run_once: True

    - name: Copy jvm.options File
      become: yes
      template:
        src: "{{ es_config_jvm }}"
        dest: "{{ es_conf_dir }}/jvm.options"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "660"
        force: yes

    - name: Copy log4j2.properties File
      become: yes
      template:
        src: "{{ es_config_log4j2 }}"
        dest: "{{ es_conf_dir }}/log4j2.properties"
        owner: "{{ es_user }}"
        group: "{{ es_group }}"
        mode: "660"
        force: yes
      when: es_config_log4j2 != ''

    - name: start elasticsearch
      become: yes
      service: name=elasticsearch state=started enabled=yes
      when:
        - es_restart_on_change
        - es_start_service
      register: es_started 

  vars:
    es_version: 8.10.2
    es_conf_dir: "/etc/elasticsearch"
    es_data_dirs: 
      - "{{ eol.es_data_dir | default('/opt/elasticsearch/data')}}"
    es_log_dir: "{{ eol.es_log_dir | default('/var/log/eol/elasticsearch/') }}"
    es_config:
      node.name: "{{ inventory_hostname }}"
      cluster.name: "{{ eol.cluster.name }}"
      cluster.initial_master_nodes: "{{ hostvars[inventory_hostname].groups.elasticsearch_master_initial_node }}"
      discovery.seed_hosts: "{{ hostvars[inventory_hostname].groups.elasticsearch_master_nodes }}"
      http.port: "{{ eol.cluster.es_api_port }}"
      transport.port: "{{ eol.cluster.es_transport_port }}"
      node.roles: "{{ eol['roles'] }}" # Use bracket syntax to avoid adding quotes
      bootstrap.memory_lock: false
      network.host: 0.0.0.0
      xpack.monitoring.collection.enabled: false
    es_heap_size: "{{ (((ansible_facts['memtotal_mb'] / 1024) | round | int) / 2) | round | int }}g"
    es_api_port: "{{ eol.cluster.es_api_port }}"
    es_api_basic_auth_username: "{{ eol.cluster.api_username }}"
    es_api_basic_auth_password: "{{ eol.cluster.api_password }}"
    es_users:
       native:
        #elastic:
          #password: "elastic" # Uncomment one time if you want change elastic password and Update group_vars/all api_password after 
        kibana_system:
           password: "{{ eol.cluster.kibana_password }}"
        remote_monitoring_user:
          password: "{{ eol.cluster.kibana_monitor_password }}"
    es_delete_unmanaged_file: false
    es_validate_certs: no # See isue https://github.com/elastic/ansible-elasticsearch/issues/679
    es_start_service: true
    es_restart_on_change: true
    es_user: elasticsearch
    es_group: elasticsearch
    es_config_default: "elasticsearch.j2"
    es_repo_base: "https://artifacts.elastic.co"
    es_use_repository: false
    es_custom_package_url: "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.10.2-x86_64.rpm"
    default_file: "/etc/sysconfig/elasticsearch"
    es_home: "/usr/share/elasticsearch"
    es_tmp_dir: "/tmp"
    sysd_config_file: "/etc/systemd/system/elasticsearch.service.d/override.conf"
    es_max_open_files: 65536
    es_config_jvm: "jvm.options.j2"
    es_config_log4j2: ""
    oss_version: false

    # JVM custom parameters
    es_java_home: ''
    es_jvm_custom_parameters: ''
    es_heap_dump_path: "/var/lib/elasticsearch"


    # SSL/TLS parameters
    es_enable_auto_ssl_configuration: false
    es_enable_http_ssl: false
    es_enable_transport_ssl: true
    es_ssl_upload: true
    es_ssl_key: "files/certs/{{ inventory_hostname }}_privatekey.pem"
    es_ssl_key_password: ""
    es_ssl_certificate: "files/certs/{{ inventory_hostname }}.crt"
    es_ssl_certificate_authority: "files/certs/ca.crt"
    es_ssl_certificate_path: "{{ es_conf_dir }}"
    es_ssl_verification_mode: "certificate"
    es_validate_certs: "yes"
    es_delete_unmanaged_file: true
    es_delete_unmanaged_native: true
    es_action_auto_create_index: true


    
    

# # Générer les certificats et les mettres dans le dossier /files/certs/
#     es_ssl_key: "files/certs/{{ inventory_hostname }}_privatekey.pem"
#     #es_ssl_key_password: "{{ eol.cluster.ssl_key_passphrase }}"
#     es_ssl_certificate: "files/certs/{{ inventory_hostname }}.crt"
#     es_ssl_certificate_authority: "files/certs/{{ eol.cluster.eol_ca_cert_name }}"

  handlers:
    - name: reload systemd configuration
      become: yes
      systemd:
        daemon_reload: true

    # Restart service and ensure it is enabled

 

